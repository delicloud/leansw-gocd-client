<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="78">
    <server artifactsdir="artifacts" purgeStart="1.0" purgeUpto="1.0" jobTimeout="120" agentAutoRegisterKey="123456789abcdef" commandRepositoryLocation="default" serverId="89521943-db31-4339-95c8-3180253896c4">
        <security>
            <passwordFile path="/var/go/password.properties" />
            <admins>
                <user>admin</user>
                <user>test2</user>
            </admins>
        </security>
    </server>
    <scms>
        <scm id="76abda6b-3f45-4a55-9775-2ab922288569" name="deliflow-ui">
            <pluginConfiguration id="github.pr" version="1" />
            <configuration>
                <property>
                    <key>url</key>
                    <value>git@github.com:twconsultants/leansw-cdmetrics-ui.git</value>
                </property>
                <property>
                    <key>username</key>
                    <value>yunlzheng</value>
                </property>
                <property>
                    <key>password</key>
                    <encryptedValue>mJP0TYf2IgCheLaN9UW7OQ==</encryptedValue>
                </property>
            </configuration>
        </scm>
        <scm id="88d12402-f42d-470c-85f9-4849ef50512b" name="identity">
            <pluginConfiguration id="github.pr" version="1" />
            <configuration>
                <property>
                    <key>url</key>
                    <value>git@github.com:twconsultants/leansw-identity.git</value>
                </property>
                <property>
                    <key>username</key>
                    <value>yunlzheng</value>
                </property>
                <property>
                    <key>password</key>
                    <encryptedValue>mJP0TYf2IgCheLaN9UW7OQ==</encryptedValue>
                </property>
            </configuration>
        </scm>
    </scms>
    <pipelines group="test">
        <pipeline name="test-pipeline-3" isLocked="false">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-plugins-status-notifier.git" />
                <pipeline pipelineName="test-pipeline-1" stageName="testManual" materialName="test-pipeline-1" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "echo ps -p doldol"&#xD;
                                            ps -p $$&#xD;
                                            echo " echo dol-0"&#xD;
                                            echo $0&#xD;
                                            echo "...source ~/.bashrc..."&#xD;
                                            source ~/.bashrc&#xD;
                                            echo "run whoami..."&#xD;
                                            whoami&#xD;
                                            echo "run evn..."&#xD;
                                            env&#xD;
                                            echo "run mvn -v"&#xD;
                                            mvn -v&#xD;
                                            echo "get JAVA_HOME"&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo "cat ~/.bashrc"&#xD;
                                            cat ~/.bashrc</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "hello script executor!"&#xD;
                                            echo $ENV_TEMP</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="test-pipeline-1" isLocked="false">
            <environmentvariables>
                <variable name="ARTIFACTORY_URL">
                    <value>http://120.27.104.224:8081/artifactory</value>
                </variable>
                <variable name="ARTIFACTORY_USER">
                    <value>admin</value>
                </variable>
                <variable name="ARTIFACTORY_PASSWORD">
                    <value>password</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics-ui.git" />
            </materials>
            <stage name="defaultStage" fetchMaterials="false">
                <approval type="manual" />
                <jobs>
                    <job name="defaultJob">
                        <environmentvariables>
                            <variable name="ARTIFACTORY_URL">
                                <value>http://120.27.104.224:8081/artifactory</value>
                            </variable>
                            <variable name="ARTIFACTORY_USER">
                                <value>admin</value>
                            </variable>
                            <variable name="ARTIFACTORY_PASSWORD">
                                <value>password</value>
                            </variable>
                        </environmentvariables>
                        <tasks>
                            <exec command="echo">
                                <arg>"Value of environment variable ENV_VAR_1 is: $ENV_VAR_1"</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="echo">
                                <arg>`env`</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>package</arg>
                                <runif status="passed" />
                            </exec>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/test-pipeline-1/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/deliflow-webapp-0.1.0-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="testManual">
                <approval type="manual" />
                <jobs>
                    <job name="jobtest">
                        <tasks>
                            <exec command="echo">
                                <arg>"testjob"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="test-pipeline-2" isLocked="false">
            <environmentvariables>
                <variable name="ARTIFACTORY_URL">
                    <value>http://120.27.104.224:8081/artifactory</value>
                </variable>
                <variable name="ARTIFACTORY_USER">
                    <value>admin</value>
                </variable>
                <variable name="ARTIFACTORY_PASSWORD">
                    <value>password</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-plugins-status-notifier.git" />
            </materials>
            <stage name="defaultStage">
                <approval type="manual" />
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>hello test-pipeline &gt; test.txt</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>package</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="cp">
                                <arg>target/lean-status-notifier-1.0-SNAPSHOT.jar</arg>
                                <arg>target/demo.jar</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="cp">
                                <arg>target/lean-status-notifier-1.0-SNAPSHOT.jar</arg>
                                <arg>target/demo_1.jar</arg>
                                <runif status="passed" />
                            </exec>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/test-pipeline-2/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>a=b</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="gauge-sample-for-test-pyramid">
            <materials>
                <git url="git@github.com:tw-leansw/sample-project-for-test-pyramid.git" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="sonar">
                        <tasks>
                            <exec command="mvn" workingdir="gauge-project">
                                <arg>clean</arg>
                                <arg>package</arg>
                                <runif status="passed" />
                            </exec>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd gauge-project&#xD;
                                            source $HOME/.bash_profile&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            jenv use java 1.8.0_71 &#xD;
                                            &#xD;
                                            sonar-runner -X -e \&#xD;
                                            -Dsonar.projectKey=gauge-sample-for-test-pyramid \&#xD;
                                            -Dsonar.projectName=gauge-sample-for-test-pyramid -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://182.92.6.60:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_PIPELINE_LABEL \&#xD;
                                            -Dlean.aggregated.test.cucumber.skip=true \&#xD;
                                            -Dlean.aggregated.test.junit.skip=true</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="any" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cucumber-sample-for-test-pyramid" isLocked="false">
            <materials>
                <git url="git@github.com:tw-leansw/sample-project-for-test-pyramid.git" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="mvn" workingdir="cucumber-project">
                                <arg>clean</arg>
                                <arg>package</arg>
                                <runif status="passed" />
                            </exec>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd cucumber-project&#xD;
                                            sonar-runner -X -e \&#xD;
                                            -Dsonar.projectKey=cucumber-sample-for-test-pyramid \&#xD;
                                            -Dsonar.projectName=cucumber-sample-for-test-pyramid -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_PIPELINE_LABEL \&#xD;
                                            -Dlean.aggregated.test.junit.skip=true \&#xD;
                                            -Dlean.aggregated.test.gauge.skip=true \&#xD;
                                            -Dlean.testpyramid.junit.exclude.test.patterns="^.*CucumberTest$"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="any" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="junit-sample-for-test-pyramid">
            <environmentvariables>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/sample-project-for-test-pyramid.git" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            cd junit-project&#xD;
                                            mvn clean package -s /etc/maven/settings.xml&#xD;
                                            sonar-runner -X -e \&#xD;
                                            -Dsonar.projectKey=junit-sample-for-test-pyramid \&#xD;
                                            -Dsonar.projectName=junit-sample-for-test-pyramid \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube -Dsonar.jdbc.password=sonarqube -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_PIPELINE_LABEL \&#xD;
                                            -Dlean.aggregated.test.gauge.skip=true \&#xD;
                                            -Dlean.aggregated.test.cucumber.skip=true</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>sonar</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="react-redux-starter-kit-forked">
            <materials>
                <git url="git@github.com:yllithoughtworks/react-redux-starter-kit.git" />
            </materials>
            <stage name="test">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>docker pull registry:5000/leansw/node_phantomjs_2_1_1&#xD;
                                            docker run  --rm -v "$PWD":/usr/src/app -w /usr/src/app registry:5000/leansw/node_phantomjs_2_1_1 /bin/bash -c "npm config set registry https://registry.npm.taobao.org &amp;&amp; npm install &amp;&amp; npm test"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="test-for-rancher">
            <materials>
                <pipeline pipelineName="test-pipeline-1" stageName="defaultStage" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "hello world"&#xD;
                                            echo "i am working"&#xD;
                                            sleep 60&#xD;
                                            echo "my work is done"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="test-for-rancher-2">
            <materials>
                <pipeline pipelineName="test-pipeline-1" stageName="defaultStage" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo “im working too”&#xD;
                                            sleep 600&#xD;
                                            echo " my work is done"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="spike-pitest">
            <materials>
                <git url="git@github.com:yllithoughtworks/spike-pi-test.git" />
            </materials>
            <stage name="test">
                <jobs>
                    <job name="test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>mvn clean test&#xD;
                                            mvn org.pitest:pitest-maven:mutationCoverage&#xD;
                                            mvn  org.pitest:pitest-maven:report</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>sonar-runner -e -X \&#xD;
                                            -Dsonar.projectKey=spike-pitest \&#xD;
                                            -Dsonar.projectName=spike-pitest \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url="http://120.27.104.224:9000" \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_PIPELINE_LABEL \&#xD;
                                            -Dsonar.pitest.mode=reuseReport</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="test-pipeline-uat" isLocked="false">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-plugins-status-notifier.git" />
                <pipeline pipelineName="test-pipeline-1" stageName="testManual" materialName="test-pipeline-1" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "echo ps -p doldol"&#xD;
                                            ps -p $$&#xD;
                                            echo " echo dol-0"&#xD;
                                            echo $0&#xD;
                                            echo "...source ~/.bashrc..."&#xD;
                                            source ~/.bashrc&#xD;
                                            echo "run whoami..."&#xD;
                                            whoami&#xD;
                                            echo "run evn..."&#xD;
                                            env&#xD;
                                            echo "run mvn -v"&#xD;
                                            mvn -v&#xD;
                                            echo "get JAVA_HOME"&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo "cat ~/.bashrc"&#xD;
                                            cat ~/.bashrc</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "hello script executor!"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="testFail">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "exit 1"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="trying-to-avoid-standby-agent">
            <materials>
                <git url="https://github.com/Qinmu-Xie/trying-to-avoid-standby-agent.git" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>sh -c "./forever_beautiful.sh"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="trying-to-avoid-standby-agent-clone">
            <materials>
                <git url="https://github.com/Qinmu-Xie/trying-to-avoid-standby-agent.git" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>sh -c "./forever_handsome.sh"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Plugins">
        <pipeline name="soanr-lean-test-pyramid-plugin">
            <materials>
                <git url="git@github.com:tw-leansw/sonar-test-pyramid-plugin.git" />
            </materials>
            <stage name="compile">
                <jobs>
                    <job name="compile">
                        <tasks>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>verify</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="sonar">
                <jobs>
                    <job name="sonar">
                        <tasks>
                            <exec command="sonar-runner">
                                <arg>-e</arg>
                                <arg>-X</arg>
                                <arg>-Dsonar.projectKey=sonar-lean-test-pyramid-plugin</arg>
                                <arg>-Dsonar.projectName=sonar-lean-test-pyramid-plugin</arg>
                                <arg>-Dsonar.projectVersion=1.0-SNAPSHOT</arg>
                                <arg>-Dsonar.sources=src</arg>
                                <arg>-Dsonar.jdbc.url=jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;rewriteBatchedStatements=true</arg>
                                <arg>-Dsonar.jdbc.username=sonarqube</arg>
                                <arg>-Dsonar.jdbc.password=sonarqube</arg>
                                <arg>-Dsonar.host.url=http://120.27.104.224:9000</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy">
                        <tasks>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>package</arg>
                            </exec>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>SONAR_CONTAINER_ID=sonarqube_5_5&#xD;
                                            docker cp ./target/sonar-lean-test-pyramid-plugin-1.0.1-SNAPSHOT.jar ${SONAR_CONTAINER_ID}:/opt/sonarqube/extensions/plugins/&#xD;
                                            docker restart ${SONAR_CONTAINER_ID}</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>sonarqube</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="sonar-aggregated-test-report-plugin">
            <environmentvariables>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/sonar-aggregated-test-report-plugin.git" />
            </materials>
            <stage name="compile">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn clean verify</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="sonar">
                <jobs>
                    <job name="sonar">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner -e -X \&#xD;
                                            -Dsonar.projectKey=sonar-aggregated-test-report-plugin \&#xD;
                                            -Dsonar.projectName=sonar-aggregated-test-report-plugin \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url="http://120.27.104.224:9000"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn clean package</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>SONAR_CONTAINER_ID=sonarqube_5_6&#xD;
                                            docker cp ./target/sonar-lean-aggregated-test-report-plugin-1.0.1-SNAPSHOT.jar ${SONAR_CONTAINER_ID}:/opt/sonarqube/extensions/plugins/&#xD;
                                            docker restart ${SONAR_CONTAINER_ID}</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>sonarqube</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Leansw-Services-Test">
        <pipeline name="Deliflow-E2E-Test">
            <materials>
                <pipeline pipelineName="cd-metrics-ui-test" stageName="run_uitest" materialName="cd-metrics-ui-test" />
                <pipeline pipelineName="identity-server-test" stageName="publish_report" materialName="identity-server-test" />
                <pipeline pipelineName="cd-metrics-server-test" stageName="defaultStage" materialName="cd-metrics-server-test" />
                <pipeline pipelineName="code-metrics-server-test" stageName="defaultStage" materialName="code-metrics-server-test" />
                <pipeline pipelineName="discovery-server-test" stageName="defaultStage" materialName="discovery-server-test" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"deliflow e2e test"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="Deliflow-Manual-Test">
            <materials>
                <pipeline pipelineName="Deliflow-E2E-Test" stageName="defaultStage" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"deliflow manual test(scan test report)"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="Deliflow-OAT">
            <materials>
                <pipeline pipelineName="Deliflow-Manual-Test" stageName="defaultStage" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"Deliflow OAT"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="Deliflow-Deploy-Prod">
            <materials>
                <pipeline pipelineName="Deliflow-OAT" stageName="defaultStage" />
            </materials>
            <stage name="deploy_prod">
                <approval type="manual" />
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"deliflow deploy to prod"</arg>
                            </exec>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Misc">
        <pipeline name="docker-gocd-agents">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-gocd-agent-docker.git" />
            </materials>
            <stage name="build_image">
                <jobs>
                    <job name="java8_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd go_agent16_2_1_java8&#xD;
                                            cp -r $HOME/.ssh .ssh&#xD;
                                            docker build -t registry.aliyuncs.com/leansw/go_agent16_2_1_java8:$GO_PIPELINE_LABEL .&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent16_2_1_java8:$GO_PIPELINE_LABEL</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="go_agnet_m2_data">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd go_agent_data&#xD;
                                            cp -r $HOME/.ssh .ssh&#xD;
                                            docker build -t registry.aliyuncs.com/leansw/go_agent_m2_data:$GO_PIPELINE_LABEL .&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_m2_data:$GO_PIPELINE_LABEL</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="node5_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd node5_11_phantomjs_2_1_1&#xD;
                                            cp -r $HOME/.ssh .ssh&#xD;
                                            docker build -t registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL .&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="node4_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd node4_4_phantomjs_2_1_1&#xD;
                                            cp -r $HOME/.ssh .ssh&#xD;
                                            docker build -t registry.aliyuncs.com/leansw/go_agent_node4:$GO_PIPELINE_LABEL .&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_node4:$GO_PIPELINE_LABEL</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="release_image">
                <approval type="manual" />
                <jobs>
                    <job name="agent_data">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>docker pull  registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL&#xD;
                                            docker tag -f registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL registry.aliyuncs.com/leansw/go_agent_node5_11:latest&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_node5_11:latest</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="java8_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>docker pull  registry.aliyuncs.com/leansw/go_agent16_2_1_java8:$GO_PIPELINE_LABEL&#xD;
                                            docker tag -f registry.aliyuncs.com/leansw/go_agent16_2_1_java8:$GO_PIPELINE_LABEL registry.aliyuncs.com/leansw/go_agent16_2_1_java8:latest&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent16_2_1_java8:latest</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="node5_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>docker pull  registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL&#xD;
                                            docker tag -f registry.aliyuncs.com/leansw/go_agent_node5_11:$GO_PIPELINE_LABEL registry.aliyuncs.com/leansw/go_agent_node5_11:latest&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_node5_11:latest</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="node4_agent">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>docker pull  registry.aliyuncs.com/leansw/go_agent_node4:$GO_PIPELINE_LABEL&#xD;
                                            docker tag -f registry.aliyuncs.com/leansw/go_agent_node4:$GO_PIPELINE_LABEL registry.aliyuncs.com/leansw/go_agent_node4:latest&#xD;
                                            docker push registry.aliyuncs.com/leansw/go_agent_node4:latest</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="pipeline-docker-images">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-pipeline-docker-image.git" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob" runOnAllAgents="true">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo "pipeline template update sucess"&#xD;
                                            &#xD;
                                            echo "begin generate Dockerfile"&#xD;
                                            source $HOME/.bashrc&#xD;
                                            fmpp ./Dockerfile.dev \&#xD;
                                            -D"fromImageName:leansw/$DOCKER_IMAGE_NAME, \&#xD;
                                            goDevPipelineName:$GO_PIPELINE_NAME, \&#xD;
                                            goDevPipelineLabel:$GO_PIPELINE_LABEL, \&#xD;
                                            goDevRevision:$GO_REVISION, \&#xD;
                                            goDevToRevision:$GO_TO_REVISION, \&#xD;
                                            goDevFromRevision:GO_FROM_REVISION" -oDockerfile.tmp&#xD;
                                            &#xD;
                                            echo "generated Dockerfile:"&#xD;
                                            echo "============================"&#xD;
                                            cat Dockerfile.tmp&#xD;
                                            echo "============================"&#xD;
                                            rm -f Dockerfile.tmp</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>fmpp</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="Online-help">
            <materials>
                <git url="git@github.com:twconsultants/leansw-doc.git" />
            </materials>
            <stage name="prepare_gitbook_env">
                <jobs>
                    <job name="update_npm_package">
                        <tasks>
                            <exec command="/bin/sh">
                                <arg>prepare.sh</arg>
                                <arg>prepare</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>doc_host</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="generate_static_site">
                <jobs>
                    <job name="generate_doc">
                        <tasks>
                            <exec command="/bin/sh">
                                <arg>prepare.sh</arg>
                                <arg>site</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>doc_host</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="publish_doc_site">
                <jobs>
                    <job name="publish_user">
                        <tasks>
                            <exec command="/bin/sh">
                                <arg>./publish-ci.sh</arg>
                                <arg>/var/www/html</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>doc_host</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="gocd-root" isLocked="false">
            <materials>
                <git url="git@github.com:twconsultants/leansw-gocd.git" />
            </materials>
            <stage name="package">
                <jobs>
                    <job name="package_container">
                        <tasks>
                            <exec command="/bin/sh" workingdir="gocd">
                                <arg>./lean</arg>
                                <arg>container</arg>
                            </exec>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                        <artifacts>
                            <artifact src="gocd/server/target/dist/go-server*.zip" dest="gocd/server/target/dist/" />
                            <artifact src="gocd/target/agent-bootstrapper/dist/go-agent*.zip" dest="gocd/target/agent-bootstrapper/dist/" />
                        </artifacts>
                    </job>
                </jobs>
            </stage>
            <stage name="acceptence">
                <jobs>
                    <job name="prepare_test_env">
                        <tasks>
                            <exec command="docker-compose" workingdir="gocd/docker/compose">
                                <arg>kill</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="docker-compose" workingdir="gocd/docker/compose">
                                <arg>up</arg>
                                <arg>-d</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="docker-compose" workingdir="gocd/docker/compose">
                                <arg>restart</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="leansw-gocd-java-client">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-gocd-client.git" />
            </materials>
            <stage name="test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unittest_sonar">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml&#xD;
                                            &#xD;
                                            sonar-runner \&#xD;
                                            -X \&#xD;
                                            -e \&#xD;
                                            -Dsonar.projectKey=lean-gocd-java-client \&#xD;
                                            -Dsonar.projectName=lean-gocd-java-client \&#xD;
                                            -Dsonar.projectVersion=0.1-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000&#xD;
                                            &#xD;
                                            mvn package -Dmaven.test.skip=true</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/${GO_PIPELINE_NAME}/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_to_nexus">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn clean deploy -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="release">
                <approval type="manual" />
                <jobs>
                    <job name="release">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn release:prepare -s /etc/maven/settings.xml&#xD;
                                            mvn release:perform -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="leansw-rancher-service-upgrader">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-rancher-service-upgrader.git" />
            </materials>
            <stage name="build">
                <jobs>
                    <job name="defaultJob" runOnAllAgents="true">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn clean package -s /etc/maven/settings.xml&#xD;
                                            cp  target//leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="leansw-sonar-java-client">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-sonar-client.git" />
            </materials>
            <stage name="test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unittest_sonar">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml&#xD;
                                            &#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=lean-sonar-java-client \&#xD;
                                            -Dsonar.projectName=lean-sonar-java-client \&#xD;
                                            -Dsonar.projectVersion=0.1-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/${GO_PIPELINE_NAME}/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_to_nexus">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn clean deploy -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="release">
                <approval type="manual" />
                <jobs>
                    <job name="release">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn release:prepare -s /etc/maven/settings.xml&#xD;
                                            mvn release:perform -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="leansw-rancher-java-client">
            <environmentvariables>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-rancher-client.git" />
            </materials>
            <stage name="test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unittest_sonar">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml&#xD;
                                            &#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=lean-rancher-java-client \&#xD;
                                            -Dsonar.projectName=lean-rancher-java-client \&#xD;
                                            -Dsonar.projectVersion=0.1-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000&#xD;
                                            &#xD;
                                            mvn package -Dmaven.test.skip=true</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/${GO_PIPELINE_NAME}/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_to_nexus">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn clean deploy -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="release">
                <approval type="manual" />
                <jobs>
                    <job name="release">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn release:prepare -s /etc/maven/settings.xml&#xD;
                                            mvn release:perform -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="leansw-github-java-client">
            <materials>
                <git url="git@github.com:tw-leansw/leansw-github-client.git" />
            </materials>
            <stage name="test">
                <jobs>
                    <job name="unittest_sonar">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml&#xD;
                                            &#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=lean-github-java-client \&#xD;
                                            -Dsonar.projectName=lean-github-java-client \&#xD;
                                            -Dsonar.projectVersion=0.1-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_to_nexus">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn clean deploy -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="release">
                <approval type="manual" />
                <jobs>
                    <job name="release">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            &#xD;
                                            mvn release:prepare -s /etc/maven/settings.xml&#xD;
                                            mvn release:perform -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-WebApp">
        <pipeline name="cd-metrics-ui-pr">
            <trackingtool link="https://github.com/twconsultants/leansw-cdmetrics-ui/issues/${ID}" regex="##(\d+)" />
            <materials>
                <scm ref="76abda6b-3f45-4a55-9775-2ab922288569" />
            </materials>
            <stage name="compile">
                <jobs>
                    <job name="package">
                        <tasks>
                            <exec command="npm">
                                <arg>install</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="npm">
                                <arg>run</arg>
                                <arg>compile</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                    <job name="eslint">
                        <tasks>
                            <exec command="npm">
                                <arg>install</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="npm">
                                <arg>run</arg>
                                <arg>lint</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="stage2">
                <jobs>
                    <job name="test">
                        <tasks>
                            <exec command="echo">
                                <arg>ls</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-test" isLocked="false">
            <environmentvariables>
                <variable name="SELENIUM_CHROM_ADDR">
                    <value>http://selenium-chrome-server.Default:4444/wd/hub</value>
                </variable>
                <variable name="DELIFLOW_LOGIN">
                    <value>http://deliflow-webapp.deliflow-ui-and-services:9900/login</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="https://github.com/Qinmu-Xie/cd-metrics-ui-test" />
                <pipeline pipelineName="cd-metrics-ui" stageName="deploy_to_test" materialName="cd-metrics-ui-deployed" />
                <pipeline pipelineName="cd-metrics" stageName="deploy" />
                <pipeline pipelineName="identity-server" stageName="compose" />
                <pipeline pipelineName="auth-service" stageName="compose" />
                <pipeline pipelineName="code-metrics" stageName="deploy" />
                <pipeline pipelineName="discovery-server" stageName="deploy_to_dev" />
            </materials>
            <stage name="run_uitest">
                <jobs>
                    <job name="uitest">
                        <environmentvariables>
                            <variable name="SHELL">
                                <value>/bin/bash</value>
                            </variable>
                        </environmentvariables>
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            &#xD;
                                            export SELENIUM_CHROME_SERVER=$SELENIUM_CHROM_ADDR&#xD;
                                            export DELIFLOW_SERVER=$DELIFLOW_LOGIN&#xD;
                                            export DELIFLOW_USER=admin@localhost&#xD;
                                            export DELIFLOW_PWD=admin&#xD;
                                            mvn -s /etc/maven/settings.xml clean test</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>java8</resource>
                            <resource>maven</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui" isLocked="false">
            <environmentvariables>
                <variable name="DEPLOY_DEST">
                    <value>/var/www/cd-metrics/web/</value>
                </variable>
                <variable name="NODE_IMAGE">
                    <value>registry:5000/leansw/node5_phantomjs_2_1_1</value>
                </variable>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>deliflow-webapp</value>
                </variable>
                <variable name="https://gocd.dev.twleansw.com/go/admin/pipelines/cd-metrics-ui/environment_variables" secure="true">
                    <encryptedValue>tYxRqCIxJfg=</encryptedValue>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics-ui.git" />
            </materials>
            <stage name="check">
                <jobs>
                    <job name="eslint_kamar_test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source ~/.nvm/nvm.sh&#xD;
                                            cd node_fe &#xD;
                                            nvm use v5&#xD;
                                            cnpm i node-sass &amp;&amp; npm install --registry=https://registry.npm.taobao.org &amp;&amp; npm run clean &amp;&amp; npm run lint</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>go-server</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="build_and_push_image">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="containeized">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>java -version&#xD;
                                            cd node_fe&#xD;
                                            source ~/.nvm/nvm.sh&#xD;
                                            nvm use v5&#xD;
                                            node -v&#xD;
                                            export PUBLIC_PATH="/"&#xD;
                                            npm install --registry=https://registry.npm.taobao.org &amp;&amp; npm run clean &amp;&amp; npm run deploy:prod&#xD;
                                            cd ..&#xD;
                                            &#xD;
                                            rm -rf ./java_be/src/main/resources/static/&#xD;
                                            cp -Rv ./node_fe/dist/ ./java_be/src/main/resources/static/&#xD;
                                            cd java_be&#xD;
                                            source $HOME/.bash_profile &#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn clean package -Pdocker -DskipTests&#xD;
                                            cd ..</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/cd-metrics-ui/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>java_be/target/deliflow-webapp-*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export DOCKER_IMAGE_NAME=deliflow-webapp&#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_to_test">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-webapp"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>deliflow-webapp</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="cd-metrics-ui-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_CD_METRICS_UI_UAT&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-webapp"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-pr-test">
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics-ui.git" dest="old" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>hello</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>deliflow-webapp</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="cd-metrics-ui" stageName="deploy_to_test" />
                <pipeline pipelineName="cd-metrics-ui-qa" stageName="sonar" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export  IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_CD_METRICS_UI&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name="deliflow-webapp"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-test-uat" isLocked="false">
            <environmentvariables>
                <variable name="SELENIUM_CHROM_ADDR">
                    <value>http://selenium-chrome-server.Default:4444/wd/hub</value>
                </variable>
                <variable name="DELIFLOW_LOGIN">
                    <value>http://deliflow-webapp-uat.Default:80</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="https://github.com/Qinmu-Xie/cd-metrics-ui-test" />
                <pipeline pipelineName="cd-metrics-ui-uat" stageName="deploy_uat" materialName="cd-metrics-ui-uat-deployed" />
                <pipeline pipelineName="cd-metrics-uat" stageName="deploy_uat" />
                <pipeline pipelineName="identity-server-uat" stageName="deploy_uat" />
                <pipeline pipelineName="auth-service-uat" stageName="deploy_uat" />
                <pipeline pipelineName="code-metrics-uat" stageName="deploy_uat" />
                <pipeline pipelineName="discovery-server-uat" stageName="deploy_uat" />
            </materials>
            <stage name="run_uitest">
                <jobs>
                    <job name="uitest">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            &#xD;
                                            export SELENIUM_CHROME_SERVER=$SELENIUM_CHROM_ADDR&#xD;
                                            export DELIFLOW_SERVER=$DELIFLOW_LOGIN&#xD;
                                            export DELIFLOW_USER=admin@localhost&#xD;
                                            export DELIFLOW_PWD=admin&#xD;
                                            mvn -s /etc/maven/settings.xml clean test</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-test-prod" isLocked="false">
            <environmentvariables>
                <variable name="SELENIUM_CHROM_ADDR">
                    <value>http://121.42.153.143:4445/wd/hub</value>
                </variable>
                <variable name="DELIFLOW_LOGIN">
                    <value>http://199.168.255.22:9900/login</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="https://github.com/Qinmu-Xie/cd-metrics-ui-test" />
                <pipeline pipelineName="cd-metrics-ui-prod" stageName="deploy_prod" materialName="cd-metrics-ui-prod-deployed" />
                <pipeline pipelineName="cd-metrics-prod" stageName="deploy_prod" />
                <pipeline pipelineName="identity-server-prod" stageName="deploy_prod" />
                <pipeline pipelineName="auth-service-prod" stageName="deploy_prod" />
                <pipeline pipelineName="code-metrics-prod" stageName="deploy_prod" />
                <pipeline pipelineName="discovery-server-prod" stageName="deploy_prod" />
            </materials>
            <stage name="run_uitest">
                <jobs>
                    <job name="uitest">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            &#xD;
                                            export SELENIUM_CHROME_SERVER=$SELENIUM_CHROM_ADDR&#xD;
                                            export DELIFLOW_SERVER=$DELIFLOW_LOGIN&#xD;
                                            export DELIFLOW_USER=admin@localhost&#xD;
                                            export DELIFLOW_PWD=admin&#xD;
                                            mvn clean test -s /etc/maven/settings.xml -Dcucumber.options="--tags ~@dev"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-ui-qa" isLocked="false">
            <environmentvariables>
                <variable name="DEPLOY_DEST">
                    <value>/var/www/cd-metrics/web/</value>
                </variable>
                <variable name="NODE_IMAGE">
                    <value>registry:5000/leansw/node5_phantomjs_2_1_1</value>
                </variable>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>deliflow-webapp</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
                <variable name="https://gocd.dev.twleansw.com/go/admin/pipelines/cd-metrics-ui/environment_variables" secure="true">
                    <encryptedValue>tYxRqCIxJfg=</encryptedValue>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics-ui.git" />
                <pipeline pipelineName="cd-metrics-ui" stageName="check" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="sonar-runner">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>cd node_fe&#xD;
                                            &#xD;
                                            source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=cd-metrics-ui \&#xD;
                                            -Dsonar.projectName=cd-metrics-ui \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000&#xD;
                                            &#xD;
                                            cd ..</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>sonar</resource>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-Identity">
        <pipeline name="identity-server">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-identity.git" />
            </materials>
            <stage name="compile">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="compile">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            mvn -v&#xD;
                                            mvn clean package -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/identity-server/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/identity-services-*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>maven</resource>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="push-image">
                <jobs>
                    <job name="push-image">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn -v &amp;&amp; mvn clean package -Pdocker -DskipTests -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export DOCKER_IMAGE_NAME=identity-services&#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                            <resource>fmpp</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="compose">
                <jobs>
                    <job name="deploy_identity_service">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-identity-service"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="identity-server-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>identity-services</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
                <variable name="SERVICE_NAME">
                    <value>deliflow-identity-service</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="identity-server" stageName="compose" />
                <pipeline pipelineName="identity-server-qa" stageName="sonar" materialName="identity-server-qa" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_IDENTITY_SERVER&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name=$SERVICE_NAME</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="identity-server-pr">
            <materials>
                <scm ref="88d12402-f42d-470c-85f9-4849ef50512b" />
            </materials>
            <stage name="commit">
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>test</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <artifacts>
                            <test src="identity-services/target/surefire-reports" />
                        </artifacts>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="identity-server-test" isLocked="false">
            <materials>
                <pipeline pipelineName="identity-server" stageName="compose" />
                <git url="git@github.com:twconsultants/leansw-identity.git" />
            </materials>
            <stage name="test">
                <jobs>
                    <job name="api_test">
                        <tasks>
                            <exec command="mvn" workingdir="identity-services-test">
                                <arg>clean</arg>
                                <arg>test-compile</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="mvn" workingdir="identity-services-test">
                                <arg>-X</arg>
                                <arg>gauge:execute</arg>
                                <arg>-DspecsDir=specs</arg>
                                <arg>-Denv=ci</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>uat</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="publish_report">
                <jobs>
                    <job name="publish_report">
                        <tasks>
                            <exec command="cp" workingdir="identity-services-test">
                                <arg>-R</arg>
                                <arg>./reports/html-report</arg>
                                <arg>/var/www/html/identity-report</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>uat</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="identity-server-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>identity-services</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="identity-server-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_IDENTITY_SERVER_UAT&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-identity-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="identity-server-qa">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-identity.git" />
                <pipeline pipelineName="identity-server" stageName="compile" materialName="identity-server" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="analysis_identity">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            mvn -v &amp;&amp; \&#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            &#xD;
                                            mvn -version&#xD;
                                            &#xD;
                                            mvn org.pitest:pitest-maven:mutationCoverage -s /etc/maven/settings.xml&#xD;
                                            mvn org.pitest:pitest-maven:report -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_IDENTITY_SERVER</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>maven</resource>
                            <resource>sonar</resource>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-Auth">
        <pipeline name="auth-service">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-auth-service.git" />
            </materials>
            <stage name="compile">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="compile">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>bash -c "source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            mvn -v &amp;&amp; \&#xD;
                                            mvn clean package -s /etc/maven/settings.xml -DskipTests"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/${GO_PIPELINE_NAME}/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>java</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="push-image">
                <jobs>
                    <job name="push_image">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn -U clean package -Pdocker  -DskipTests=true -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export DOCKER_IMAGE_NAME=auth-server&#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>go-server</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="compose">
                <jobs>
                    <job name="deploy_auth_server">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-auth-service"</value>
                                    </property>
                                </configuration>
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="auth-service-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>auth-server</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
                <variable name="SERVICE_NAME">
                    <value>deliflow-auth-service</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="auth-service" stageName="compose" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_AUTH_SERVICE&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name=$SERVICE_NAME</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="auth-service-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>auth-server</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="auth-service-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_AUTH_SERVICE_UAT&#xD;
                                            &#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-auth-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="auth-service-qa">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-auth-service.git" />
                <pipeline pipelineName="auth-service" stageName="compile" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="analysis_auth">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>bash -c "source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            mvn -v &amp;&amp; \&#xD;
                                            mvn clean cobertura:cobertura -s /etc/maven/settings.xml"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_AUTH_SERVICE</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>sonar</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-CDMetrics">
        <pipeline name="cd-metrics-server-test">
            <materials>
                <pipeline pipelineName="cd-metrics" stageName="deploy" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"server test!"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>cd-metrics</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="cd-metrics-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_CD_METRICS_UAT&#xD;
                                            &#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-cd-metrics-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>cd-metrics</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="cd-metrics" stageName="deploy" />
                <pipeline pipelineName="cd-metrics-qa" stageName="unit-test-sonar" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_CD_CDMTRICS&#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name="deliflow-cd-metrics-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics-qa">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics.git" materialName="cd-metrics" />
                <pipeline pipelineName="cd-metrics" stageName="unit-test" materialName="pipeline-cd-metrics" />
            </materials>
            <stage name="unit-test-sonar">
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            mvn -version&#xD;
                                            &#xD;
                                            mvn clean -U cobertura:cobertura -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            &#xD;
                                            mvn -version&#xD;
                                            &#xD;
                                            mvn org.pitest:pitest-maven:mutationCoverage -s /etc/maven/settings.xml&#xD;
                                            mvn org.pitest:pitest-maven:report -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner -e -X \&#xD;
                                            -Dsonar.projectKey=cd-cdmtrics \&#xD;
                                            -Dsonar.projectName=cd-cdmtrics \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url="http://120.27.104.224:9000" \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_PIPELINE_CD_METRICS</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                        <artifacts>
                            <test src="target/surefire-reports" />
                        </artifacts>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="cd-metrics">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-cdmetrics.git" materialName="cd-metrics" />
            </materials>
            <stage name="unit-test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            mvn -version&#xD;
                                            &#xD;
                                            mvn clean -U package -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/cd-cdmtrics/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/cd-metrics-*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                        <artifacts>
                            <test src="target/surefire-reports" />
                        </artifacts>
                    </job>
                </jobs>
            </stage>
            <stage name="build_docker_images">
                <jobs>
                    <job name="build_and_push_docker_image">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn -U clean package -Pdocker  -DskipTests=true -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export GO_REVISION=$GO_REVISION_CD_METRICS&#xD;
                                            export GO_TO_REVISION=$GO_TO_REVISION_CD_METRICS&#xD;
                                            export GO_FROM_REVISION=$GO_FROM_REVISION_CD_METRICS&#xD;
                                            export DOCKER_IMAGE_NAME=cd-metrics&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-cd-metrics-service"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-CodeMetrics">
        <pipeline name="code-metrics-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>code-metrics</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="code-metrics-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_CODE_METRICS_UAT&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-code-metrics-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="code-metrics">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-codemetrics.git" materialName="code-metrics-repo" />
            </materials>
            <stage name="unit-test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo $SHELL&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            &#xD;
                                            mvn package -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/code-metrics/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/code-metrics-*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="containeized">
                <jobs>
                    <job name="create-docker-image-and-push">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn clean package -Pdocker -DskipTests -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export GO_REVISION=$GO_REVISION_CODE_METRICS_REPO&#xD;
                                            export GO_TO_REVISION=$GO_TO_REVISION_CODE_METRICS_REPO&#xD;
                                            export GO_FROM_REVISION=$GO_FROM_REVISION_CODE_METRICS_REPO&#xD;
                                            export DOCKER_IMAGE_NAME=code-metrics&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-code-metrics-service"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="code-metrics-server-test">
            <materials>
                <pipeline pipelineName="code-metrics" stageName="deploy" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"server test!"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="code-metrics-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>code-metrics</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
                <variable name="SERVICE_NAME">
                    <value>deliflow-code-metrics-service</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="code-metrics" stageName="deploy" />
                <pipeline pipelineName="code-metrics-qa" stageName="compile_sonar" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_CODE_METRICS&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name=$SERVICE_NAME</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="code-metrics-qa">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:twconsultants/leansw-codemetrics.git" materialName="code-metrics-repo" />
                <pipeline pipelineName="code-metrics" stageName="unit-test" />
            </materials>
            <stage name="compile_sonar">
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>echo $SHELL&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            &#xD;
                                            mvn cobertura:cobertura -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>mvn org.pitest:pitest-maven:mutationCoverage -s /etc/maven/settings.xml&#xD;
                                            mvn org.pitest:pitest-maven:report -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=code-metrics \&#xD;
                                            -Dsonar.projectName=code-metrics \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_CODE_METRICS \&#xD;
                                            -Dlean.aggregated.test.gauge.skip=true \&#xD;
                                            -Dlean.aggregated.test.cucumber.skip=true</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>java8</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-Discovery">
        <pipeline name="discovery-server">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-discovery-service.git" materialName="discovery-service" />
            </materials>
            <stage name="package_docker">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="package_docker">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn -U clean package -Pdocker  -DskipTests=true -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export DOCKER_IMAGE_NAME=discovery-service&#xD;
                                            export GO_REVISION=$GO_REVISION_DISCOVERY_SERVICE&#xD;
                                            export GO_TO_REVISION=$GO_TO_REVISION_DISCOVERY_SERVICE&#xD;
                                            export GO_FROM_REVISION=$GO_FROM_REVISION_DISCOVERY_SERVICE&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/discovery-server/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/discovery-service-*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_to_dev">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-discovery-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="discovery-server-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>discovery-service</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="discovery-server" stageName="deploy_to_dev" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_DISCOVERY_SERVER&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name="deliflow-discovery-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="discovery-server-test">
            <materials>
                <pipeline pipelineName="discovery-server" stageName="deploy_to_dev" />
            </materials>
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob">
                        <tasks>
                            <exec command="echo">
                                <arg>"server test!"</arg>
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="discovery-server-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>discovery-service</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="discovery-server-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_DISCOVERY_SERVER_UAT&#xD;
                                            &#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-discovery-service"</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="discovery-server-qa">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-discovery-service.git" materialName="discovery-service" />
                <pipeline pipelineName="discovery-server" stageName="package_docker" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="sonar-runner">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            java -version &amp;&amp; \&#xD;
                                            sonar-runner \&#xD;
                                            -Dsonar.projectKey=discovery-server \&#xD;
                                            -Dsonar.projectName=discovery-server \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_DISCOVERY_SERVER</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>sonar</resource>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-Config">
        <pipeline name="config-server">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-config-service.git" materialName="config-service" />
            </materials>
            <stage name="package">
                <jobs>
                    <job name="containeized">
                        <tasks>
                            <exec command="mvn">
                                <arg>clean</arg>
                                <arg>package</arg>
                                <arg>-Pdocker</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="sh">
                                <arg>-c</arg>
                                <arg>docker tag -f leansw/config-service $LEANSW_DOCKER_REGISTRY/config-service:$GO_PIPELINE_LABEL</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="sh">
                                <arg>-c</arg>
                                <arg>docker push $LEANSW_DOCKER_REGISTRY/config-service:$GO_PIPELINE_LABEL</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="sh">
                                <arg>-c</arg>
                                <arg>docker rmi $LEANSW_DOCKER_REGISTRY/config-service:$GO_PIPELINE_LABEL</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="docker">
                                <arg>rmi</arg>
                                <arg>leansw/config-service</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="sonar">
                <jobs>
                    <job name="sonar-runner">
                        <tasks>
                            <exec command="sonar-runner">
                                <arg>-Dsonar.projectKey=config-server</arg>
                                <arg>-Dsonar.projectName=config-server</arg>
                                <arg>-Dsonar.projectVersion=1.0-SNAPSHOT</arg>
                                <arg>-Dsonar.sources=src</arg>
                                <arg>-Dsonar.jdbc.url=jdbc:mysql://120.27.104.224:3306/sonarqube?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;rewriteBatchedStatements=true</arg>
                                <arg>-Dsonar.jdbc.username=sonarqube</arg>
                                <arg>-Dsonar.jdbc.password=sonarqube</arg>
                                <arg>-Dsonar.host.url=http://120.27.104.224:9000</arg>
                                <runif status="passed" />
                            </exec>
                        </tasks>
                    </job>
                </jobs>
            </stage>
            <stage name="test">
                <jobs>
                    <job name="run_compose">
                        <tasks>
                            <exec command="sh">
                                <arg>-c</arg>
                                <arg>docker pull $LEANSW_DOCKER_REGISTRY/config-service:$GO_PIPELINE_LABEL</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="sh">
                                <arg>-c</arg>
                                <arg>docker tag -f $LEANSW_DOCKER_REGISTRY/config-service:$GO_PIPELINE_LABEL leansw/config-service:latest</arg>
                                <runif status="passed" />
                            </exec>
                            <exec command="docker-compose" workingdir="config-service">
                                <arg>up</arg>
                                <arg>-d</arg>
                            </exec>
                        </tasks>
                        <resources>
                            <resource>uat</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <pipelines group="Deliflow-Quartz">
        <pipeline name="quartz-service">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-quartz-service.git" materialName="quartz" />
            </materials>
            <stage name="unit-test">
                <environmentvariables>
                    <variable name="ARTIFACTORY_URL">
                        <value>http://120.27.104.224:8081/artifactory</value>
                    </variable>
                    <variable name="ARTIFACTORY_USER">
                        <value>admin</value>
                    </variable>
                    <variable name="ARTIFACTORY_PASSWORD">
                        <value>password</value>
                    </variable>
                </environmentvariables>
                <jobs>
                    <job name="unit-test">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export JAVA_HOME=/var/go/.jenv/candidates/java/current&#xD;
                                            echo $JAVA_HOME&#xD;
                                            echo $PATH&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            mvn -version&#xD;
                                            &#xD;
                                            mvn clean -U package -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="com.tw.go.plugins.go-artifactory-plugin" version="1" />
                                <configuration>
                                    <property>
                                        <key>URI</key>
                                        <value>test-repo/${GO_PIPELINE_NAME}/${GO_PIPELINE_LABEL}.${GO_STAGE_COUNTER}</value>
                                    </property>
                                    <property>
                                        <key>uriIsFolder</key>
                                        <value>true</value>
                                    </property>
                                    <property>
                                        <key>Path</key>
                                        <value>target/*-SNAPSHOT.jar</value>
                                    </property>
                                    <property>
                                        <key>Properties</key>
                                        <value>k=v</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dynamic-managed-agent</resource>
                            <resource>maven</resource>
                            <resource>java8</resource>
                        </resources>
                        <artifacts>
                            <test src="target/surefire-reports" />
                        </artifacts>
                    </job>
                </jobs>
            </stage>
            <stage name="build_docker_images">
                <jobs>
                    <job name="build_and_push_docker_image">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            mvn dependency:copy-dependencies -DincludeScope=runtime -DoutputDirectory=src/main/docker/lib&#xD;
                                            mvn -U clean package -Pdocker  -DskipTests=true -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export GO_REVISION=$GO_REVISION_QUARTZ&#xD;
                                            export GO_TO_REVISION=$GO_TO_REVISION_QUARTZ&#xD;
                                            export GO_FROM_REVISION=$GO_FROM_REVISION_QUARTZ&#xD;
                                            export DOCKER_IMAGE_NAME=quartz-service&#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/dev_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>docker</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="Default" \&#xD;
                                            --stack.name="deliflow-ui-and-services" \&#xD;
                                            --service.name="deliflow-quartz-service"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="quartz-service-qa" isLocked="false">
            <environmentvariables>
                <variable name="DEPLOY_DEST">
                    <value>/var/www/cd-metrics/web/</value>
                </variable>
                <variable name="NODE_IMAGE">
                    <value>registry:5000/leansw/node5_phantomjs_2_1_1</value>
                </variable>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>14E81ABF45359F074521</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>E7xmHz2h22iJWUpf1atDEnqsd2zzv9udHdsQkjjy</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>deliflow-webapp</value>
                </variable>
                <variable name="SONAR_MYSQL">
                    <value>182.92.6.60</value>
                </variable>
                <variable name="https://gocd.dev.twleansw.com/go/admin/pipelines/cd-metrics-ui/environment_variables" secure="true">
                    <encryptedValue>tYxRqCIxJfg=</encryptedValue>
                </variable>
            </environmentvariables>
            <materials>
                <git url="git@github.com:tw-leansw/leansw-quartz-service.git" />
                <pipeline pipelineName="quartz-service" stageName="unit-test" />
            </materials>
            <stage name="sonar">
                <jobs>
                    <job name="sonar-runner">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            mvn -v &amp;&amp; \&#xD;
                                            mvn clean cobertura:cobertura -s /etc/maven/settings.xml</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source $HOME/.bash_profile &amp;&amp; \&#xD;
                                            export JAVA_HOME=/var/go/.jenv/candidates/java/current &amp;&amp; \&#xD;
                                            jenv use java 1.8.0_71 &amp;&amp; \&#xD;
                                            echo $JAVA_HOME &amp;&amp; \&#xD;
                                            echo $PATH &amp;&amp; java -version &amp;&amp; \&#xD;
                                            sonar-runner -X \&#xD;
                                            -Dsonar.projectKey=quartz-service \&#xD;
                                            -Dsonar.projectName=quartz-service \&#xD;
                                            -Dsonar.projectVersion=1.0-SNAPSHOT \&#xD;
                                            -Dsonar.sources=src \&#xD;
                                            -Dsonar.jdbc.url="jdbc:mysql://$SONAR_MYSQL:3306/sonarqube?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true" \&#xD;
                                            -Dsonar.jdbc.username=sonarqube \&#xD;
                                            -Dsonar.jdbc.password=sonarqube \&#xD;
                                            -Dsonar.host.url=http://120.27.104.224:9000 \&#xD;
                                            -Dlean.aggregated.test.project.build=$GO_DEPENDENCY_LABEL_QUARTZ_SERVICE</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>sonar</resource>
                            <resource>dynamic-managed-agent</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="quartz-service-uat">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>quartz-service</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>6240E09C4D35BBA4FA22</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>QZo1NzmckQN1t7chjFnJakiHLa1nS8edxs6VnEq8</value>
                </variable>
                <variable name="SERVICE_NAME">
                    <value>deliflow-quartz-service</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="quartz-service" stageName="deploy" />
                <pipeline pipelineName="quartz-service-qa" stageName="sonar" materialName="quartz-service-qa" />
            </materials>
            <stage name="tag_release_candidate">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$GO_DEPENDENCY_LABEL_QUARTZ_SERVICE &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/rc_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_uat">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="uat" \&#xD;
                                            --stack.name="deliflow-ui-and-services-uat" \&#xD;
                                            --service.name=$SERVICE_NAME</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
        <pipeline name="quartz-service-prod">
            <environmentvariables>
                <variable name="LEANSW_DOCKER_REGISTRY">
                    <value>registry.aliyuncs.com/leansw</value>
                </variable>
                <variable name="DOCKER_IMAGE_NAME">
                    <value>quartz-service</value>
                </variable>
                <variable name="RANCHER_URI">
                    <value>http://121.42.193.129:8080/v1/</value>
                </variable>
                <variable name="RANCHER_API_SECRET">
                    <value>F10AD80226A6A9388F7B</value>
                </variable>
                <variable name="RANCHER_SECRET_KEY">
                    <value>RK6zCFT2eH71CCexz9MUVQwmSdketvfCGULVVhU9</value>
                </variable>
            </environmentvariables>
            <materials>
                <pipeline pipelineName="quartz-service-uat" stageName="deploy_uat" />
            </materials>
            <stage name="tag_release">
                <approval type="manual" />
                <jobs>
                    <job name="tag_release_candidate">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>export IMAGE_FROM=$LEANSW_DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:rc-$GO_DEPENDENCY_LABEL_QUARTZ_SERVICE_UAT&#xD;
                                            &#xD;
                                            source /var/lib/go-agent/pipelines/pipeline-docker-images/bin/release_rebuild.sh</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>dev</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
            <stage name="deploy_prod">
                <jobs>
                    <job name="deploy_by_rancher">
                        <tasks>
                            <task>
                                <pluginConfiguration id="script-executor" version="1" />
                                <configuration>
                                    <property>
                                        <key>script</key>
                                        <value>source "$HOME/.jenv/bin/jenv-init.sh"&#xD;
                                            jenv use java 1.8.0_71&#xD;
                                            java -version&#xD;
                                            &#xD;
                                            java -jar /var/go/bin/leansw-rancher-service-upgrader-1.0-SNAPSHOT.jar \&#xD;
                                            --rancher.uri=$RANCHER_URI \&#xD;
                                            --app.secret=$RANCHER_API_SECRET \&#xD;
                                            --secret.key=$RANCHER_SECRET_KEY \&#xD;
                                            --environment.name="pwc" \&#xD;
                                            --stack.name="deliflow-ui-and-services-pwc" \&#xD;
                                            --service.name="deliflow-quartz-service"</value>
                                    </property>
                                    <property>
                                        <key>shtype</key>
                                        <value>bash</value>
                                    </property>
                                </configuration>
                                <runif status="passed" />
                            </task>
                        </tasks>
                        <resources>
                            <resource>rancher-upgrader</resource>
                        </resources>
                    </job>
                </jobs>
            </stage>
        </pipeline>
    </pipelines>
    <templates>
        <pipeline name="Test-Template">
            <stage name="defaultStage">
                <jobs>
                    <job name="defaultJob" />
                </jobs>
            </stage>
        </pipeline>
    </templates>
    <environments>
        <environment name="deliflow_all" />
    </environments>
    <agents>
        <agent hostname="iZ28h2t7rzrZ" ipaddress="10.174.231.41" uuid="fcbd4ecc-9952-4e06-a9c4-ad2f1f97f618">
            <resources>
                <resource>jenv</resource>
                <resource>sonarqube</resource>
                <resource>resource-for-test</resource>
                <resource>maven</resource>
                <resource>java1_8_0_71</resource>
                <resource>karam</resource>
                <resource>sonar</resource>
                <resource>ansible</resource>
                <resource>docker</resource>
                <resource>go-server</resource>
                <resource>rancher-upgrader</resource>
                <resource>fmpp</resource>
            </resources>
        </agent>
        <agent hostname="iZ28ckn324vZ" ipaddress="10.174.208.186" uuid="f04aff69-b664-4894-b233-84020b953269">
            <resources>
                <resource>maven</resource>
                <resource>uat</resource>
                <resource>doc_host</resource>
                <resource>dev</resource>
                <resource>sonar</resource>
                <resource>java1_8_0_71</resource>
                <resource>jenv</resource>
                <resource>fmpp</resource>
            </resources>
        </agent>
        <agent hostname="f2236258504d" ipaddress="10.42.91.191" uuid="bf498410-fb6c-4d17-8f44-e7faf1efc68f">
            <resources>
                <resource>dynamic-managed-agent</resource>
                <resource>java</resource>
                <resource>java8</resource>
                <resource>maven</resource>
                <resource>rancher-Default-go-agent16-2-1-java8</resource>
                <resource>sonar</resource>
            </resources>
        </agent>
    </agents>
</cruise>

